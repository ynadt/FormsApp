generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

enum QuestionType {
  SINGLE_LINE
  MULTI_LINE
  INTEGER
  CHECKBOX
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  blocked   Boolean  @default(false)
  language  String   @default("en")
  theme     String   @default("light")
  createdAt DateTime @default(now())

  templates        Template[]
  templateAccesses TemplateAccess[]
  forms            Form[]
  comments         Comment[]
  likes            Like[]

  @@index([email])
  @@index([name])
}

model Template {
  id          String  @id @default(uuid())
  title       String
  description String?
  image_url   String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  topic       Topic?  @relation(fields: [topicId], references: [id])
  topicId     String?

  public    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  tags             TemplateTag[]
  templateAccesses TemplateAccess[]
  forms            Form[]
  comments         Comment[]
  likes            Like[]
  questions        Question[]

  search_vector Unsupported("tsvector")?
}

model Question {
  id            String       @id @default(uuid())
  template      Template     @relation(fields: [templateId], references: [id])
  templateId    String
  type          QuestionType
  title         String
  description   String?
  order         Int
  required      Boolean      @default(false)
  showInResults Boolean      @default(true)

  answers Answer[]

  search_vector Unsupported("tsvector")?
}

model Answer {
  id         String   @id @default(uuid())
  form       Form     @relation(fields: [formId], references: [id])
  formId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  value      String?

  @@unique([formId, questionId], name: "formId_questionId")
}

model TemplateAccess {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Form {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  version    Int      @default(1)

  answers Answer[]
}

model Comment {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  text       String
  createdAt  DateTime @default(now())

  search_vector Unsupported("tsvector")?
}

model Like {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Topic {
  id        String     @id @default(uuid())
  name      String     @unique
  templates Template[]

  search_vector Unsupported("tsvector")?
}

model Tag {
  id        String        @id @default(uuid())
  name      String        @unique
  templates TemplateTag[]

  search_vector Unsupported("tsvector")?
}

model TemplateTag {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String

  @@unique([templateId, tagId])
}
